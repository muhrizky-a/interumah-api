{
	"info": {
		"_postman_id": "2147d204-7cf8-46c7-8c13-a2cc83d07657",
		"name": "MKA - Tim F Project API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Add User with Valid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(201);\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.email).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"john@test.com\",\r\n    \"password\": \"P@ssw0rd\",\r\n    \"confirmPassword\": \"P@ssw0rd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badUserPayloads = pm.environment.get('badUserPayloads');\r",
									"\r",
									"if (!badUserPayloads | badUserPayloads.length === 0) {\r",
									"    badUserPayloads = [\r",
									"        {},\r",
									"        { email: 'john@test.com' },\r",
									"        { email: 1 },\r",
									"        { password : '1' },\r",
									"        { password : true },\r",
									"        { email: '' , password : '' },\r",
									"        { email: true , password : 1 },\r",
									"\r",
									"    ];\r",
									"}\r",
									"\r",
									"const currentBadUserPayload = badUserPayloads.shift();\r",
									"pm.environment.set('currentBadUserPayload', JSON.stringify(currentBadUserPayload));\r",
									"pm.environment.set('badUserPayloads', badUserPayloads);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(400);\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.errors).to.be.an('object');\r",
									"})\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badUserPayloads = pm.environment.get('badUserPayloads');\r",
									" \r",
									"    if(badUserPayloads && badUserPayloads.length > 0) {\r",
									"        postman.setNextRequest('Add User with Invalid Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadUserPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Already Taken Email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const port = pm.environment.get('port');\r",
									"\r",
									"const requestParams = {\r",
									"  url: `http://localhost:${port}/users`,\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({ username: 'dicoding', password: 'secret', fullname: 'Dicoding Indonesia' })\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(requestParams, (_, error) => {\r",
									"    if (error) {\r",
									"        console.error(error);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(400);\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.errors).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"john@test.com\",\r\n    \"password\": \"P@ssw0rd\",\r\n    \"confirmPassword\": \"P@ssw0rd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "(LOGIN REQUIRED) Update User John",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(200);\r",
									"    pm.expect(responseJson.status).to.be.an('string');\r",
									"    pm.expect(responseJson.status).to.equal('USER_UPDATED');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"John Doe\",\r\n    \"age\": \"42\",\r\n    \"phone\": \"081234567891\",\r\n    \"address\": \"Home\",\r\n    \"job\": \"IT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Verifications",
			"item": [
				{
					"name": "(LOGIN REQUIRED) Request for Verify User John",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(201);\r",
									"    pm.expect(responseJson.status).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify User John with OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(200);\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"john@test.com\",\r\n    \"otp\": 1419\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/register/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"register",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for Reset Password John",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(201);\r",
									"    pm.expect(responseJson.status).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"john@test.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/forgot-password",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password John with OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(200);\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"john@test.com\",\r\n    \"password\": \"NEWP@ssw0rd\",\r\n    \"confirmPassword\": \"NEWP@ssw0rd\",\r\n    \"otp\": 781096\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/forgot-password/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"forgot-password",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password John with OTP Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(200);\r",
									"    pm.expect(responseJson.status).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"john@test.com\",\r\n    \"password\": \"NEWP@ssw0rd\",\r\n    \"confirmPassword\": \"NEWP@ssw0rd\",\r\n    \"otp\": 781096\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/forgot-password/verify",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"forgot-password",
								"verify"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login with Invalid Payload",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Not Found User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"email\": \"xxxxx\",\r\n    \"password\": \"xxxxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Invalid Password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"email\": \"john@test.com\",\r\n    \"password\": \"xxxxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Email John",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(201);\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
									"    pm.expect(responseJson.data.refreshToken).to.be.a('string');\r",
									"    \r",
									"    pm.environment.set('accessTokenJohn', responseJson.data.accessToken);\r",
									"    pm.environment.set('refreshTokenJohn', responseJson.data.refreshToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"email\": \"john@test.com\",\r\n    \"password\": \"P@ssw0rd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Google",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/oauth2/redirect/google",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth2",
								"redirect",
								"google"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Logged-In User Data",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Auth John",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(200);\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
									"    pm.environment.set('accessTokenJohn', responseJson.data.accessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshTokenJohn}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Auth (Logout) John",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(200);\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.equal('Refresh token berhasil dihapus');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshTokenJohn}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Interior Designs",
			"item": [
				{
					"name": "[No Tests] Prequisites",
					"item": [
						{
							"name": "Add Designer Daniel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test('When PUT users Designer', () => {\r",
											"//     const payload = {\r",
											"//         \"name\":\"Daniel Design\",\r",
											"//         \"age\": \"40\",\r",
											"//         \"phone\": \"081234567899\",\r",
											"//         \"address\": \"-\",\r",
											"//         \"job\": \"-\"\r",
											"//     };\r",
											"//     const host = pm.environment.get('host');\r",
											"\r",
											"//     pm.sendRequest(`${host}/users`, (error, response) => {\r",
											"//         if (!error) {\r",
											"//             pm.test('it should response with not found', () => {\r",
											"//                 pm.expect(response.code).to.equal(404);\r",
											"//             });\r",
											"//         }\r",
											"//     });\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"daniel@design.com\",\r\n    \"password\": \"P@ssw0rd\",\r\n    \"confirmPassword\": \"P@ssw0rd\",\r\n    \"role\": \"designer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with Email Designer Daniel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 201 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('response body have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson.code).to.equal(201);\r",
											"    pm.expect(responseJson.data).to.be.an('object');\r",
											"    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
											"    pm.expect(responseJson.data.refreshToken).to.be.a('string');\r",
											"    \r",
											"    pm.environment.set('accessTokenDesigner', responseJson.data.accessToken);\r",
											"    pm.environment.set('refreshTokenDesigner', responseJson.data.refreshToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"email\": \"daniel@design.com\",\r\n    \"password\": \"P@ssw0rd\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Designer JackDesign",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test('When PUT users Designer', () => {\r",
											"//     const payload = {\r",
											"//         \"name\":\"Daniel Design\",\r",
											"//         \"age\": \"40\",\r",
											"//         \"phone\": \"081234567899\",\r",
											"//         \"address\": \"-\",\r",
											"//         \"job\": \"-\"\r",
											"//     };\r",
											"//     const host = pm.environment.get('host');\r",
											"\r",
											"//     pm.sendRequest(`${host}/users`, (error, response) => {\r",
											"//         if (!error) {\r",
											"//             pm.test('it should response with not found', () => {\r",
											"//                 pm.expect(response.code).to.equal(404);\r",
											"//             });\r",
											"//         }\r",
											"//     });\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"jack@design.com\",\r\n    \"password\": \"P@ssw0rd\",\r\n    \"confirmPassword\": \"P@ssw0rd\",\r\n    \"role\": \"designer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with Email Designer JackDesign",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 201 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('response body have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson.code).to.equal(201);\r",
											"    pm.expect(responseJson.data).to.be.an('object');\r",
											"    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
											"    pm.expect(responseJson.data.refreshToken).to.be.a('string');\r",
											"    \r",
											"    pm.environment.set('accessTokenDesignerJack', responseJson.data.accessToken);\r",
											"    pm.environment.set('refreshTokenDesignerJack', responseJson.data.refreshToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"email\": \"jack@design.com\",\r\n    \"password\": \"P@ssw0rd\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Categories",
					"item": [
						{
							"name": "Add Category with Invalid Payload",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let badCategoryPayloads = pm.environment.get('badCategoryPayloads');\r",
											"\r",
											"if (!badCategoryPayloads | badCategoryPayloads.length === 0) {\r",
											"    badCategoryPayloads = [\r",
											"        {},\r",
											"        { name: true },\r",
											"        { name: ''},\r",
											"        { name: 1}\r",
											"    ];\r",
											"}\r",
											"\r",
											"const currentBadCategoryPayload = badCategoryPayloads.shift();\r",
											"pm.environment.set('currentBadCategoryPayload', JSON.stringify(currentBadCategoryPayload));\r",
											"pm.environment.set('badCategoryPayloads', badCategoryPayloads);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('response body have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson.code).to.equal(400);\r",
											"    pm.expect(responseJson.message).to.be.a('string');\r",
											"    pm.expect(responseJson.errors).to.be.an('object');\r",
											"})\r",
											"\r",
											"const repeatRequestUntilDatasetEmpty = () => {\r",
											"    const badCategoryPayloads = pm.environment.get('badCategoryPayloads');\r",
											" \r",
											"    if(badCategoryPayloads && badCategoryPayloads.length > 0) {\r",
											"        postman.setNextRequest('Add Category with Invalid Payload');\r",
											"    }\r",
											"}\r",
											" \r",
											"repeatRequestUntilDatasetEmpty();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{currentBadCategoryPayload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/designs/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Category \"Dapur\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 201 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('response body have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson.code).to.equal(201);\r",
											"    pm.expect(responseJson.data).to.be.an('object');\r",
											"    pm.expect(responseJson.data.name).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenDesigner}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"Dapur\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/designs/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Category \"Ruang Tamu\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 201 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('response body have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson.code).to.equal(201);\r",
											"    pm.expect(responseJson.data).to.be.an('object');\r",
											"    pm.expect(responseJson.data.name).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenDesigner}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"Ruang Tamu\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/designs/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 201 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('response body have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson.code).to.equal(200);\r",
											"    pm.expect(responseJson.data).to.be.an('object');\r",
											"    pm.expect(responseJson.data.categories).to.be.an('array');\r",
											"    pm.expect(responseJson.data.categories).to.length(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/designs/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 201 status code', () => {\r",
											"    pm.expect(pm.response).to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('response Content-Type header should have application/json value', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
											"}); \r",
											"\r",
											"pm.test('response body should an object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('response body have correct property and value', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson.code).to.equal(200);\r",
											"    pm.expect(responseJson.data).to.be.an('object');\r",
											"    pm.expect(responseJson.data.name).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/designs/categories/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs",
										"categories",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Designs",
					"item": [
						{
							"name": "Add Design \"Dapur 3x3\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenDesigner}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "category_id",
											"value": "1",
											"contentType": "",
											"type": "default"
										},
										{
											"key": "title",
											"value": "Dapur Pendek",
											"type": "default"
										},
										{
											"key": "description",
											"value": "RAK ATAS 2 MODEL \\n LEMASI ES/KULKAS\\n1 SET TEMPAT MASAK\\nKOMPOR YANG TELAH JADI\\nSATU DENGAN MEJA\\nTEMPAT CUCI PIRING/WASTAFEL",
											"type": "default"
										},
										{
											"key": "area",
											"value": "18",
											"type": "default"
										},
										{
											"key": "image",
											"contentType": "",
											"type": "file",
											"src": [
												"/C:/Users/Ri_zki/Pictures/vlcsnap-2022-03-27-11h15m05s673.png",
												"/C:/Users/Ri_zki/Pictures/vlcsnap-2022-03-27-11h16m09s358.png"
											]
										},
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/Ri_zki/Pictures/vlcsnap-2022-03-27-11h16m09s358.png",
											"disabled": true
										},
										{
											"key": "image[]",
											"type": "file",
											"src": [],
											"disabled": true
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/designs",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Design \"Ruang Tamu\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenDesigner}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "category_id",
											"value": "2",
											"contentType": "",
											"type": "default"
										},
										{
											"key": "title",
											"value": "Ruang Tamu",
											"type": "default"
										},
										{
											"key": "description",
											"value": "Deskripsi Ruang Tamu:\\n - Deskripsi 1\\n - Deskripsi 2",
											"type": "default"
										},
										{
											"key": "area",
											"value": "15",
											"type": "default"
										},
										{
											"key": "image",
											"contentType": "",
											"type": "file",
											"src": "/C:/Users/Ri_zki/Pictures/vlcsnap-2022-04-30-23h54m46s243.png"
										},
										{
											"key": "image[]",
											"type": "file",
											"src": [],
											"disabled": true
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/designs",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Designs using Title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"category_id\": 1,\r\n    \"title\": \"Dapur\",\r\n    \"description\": \"RAK ATAS 2 MODEL \\n LEMASI ES/KULKAS\\n1 SET TEMPAT MASAK\\nKOMPOR YANG TELAH JADI\\nSATU DENGAN MEJA\\nTEMPAT CUCI PIRING/WASTAFEL\",\r\n    \"area\":9,\r\n    \"image\":\"-\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/designs?title=U",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs"
									],
									"query": [
										{
											"key": "title",
											"value": "U"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Designs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"category_id\": 1,\r\n    \"title\": \"Dapur\",\r\n    \"description\": \"RAK ATAS 2 MODEL \\n LEMASI ES/KULKAS\\n1 SET TEMPAT MASAK\\nKOMPOR YANG TELAH JADI\\nSATU DENGAN MEJA\\nTEMPAT CUCI PIRING/WASTAFEL\",\r\n    \"area\":9,\r\n    \"image\":\"-\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/designs",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter Designs by Designer UserID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"category_id\": 1,\r\n    \"title\": \"Dapur\",\r\n    \"description\": \"RAK ATAS 2 MODEL \\n LEMASI ES/KULKAS\\n1 SET TEMPAT MASAK\\nKOMPOR YANG TELAH JADI\\nSATU DENGAN MEJA\\nTEMPAT CUCI PIRING/WASTAFEL\",\r\n    \"area\":9,\r\n    \"image\":\"-\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/designs?user=2",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs"
									],
									"query": [
										{
											"key": "user",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Design",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/designs/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Design Image",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/uploads/designs/1-1666248689001.png",
									"host": [
										"{{host}}"
									],
									"path": [
										"uploads",
										"designs",
										"1-1666248689001.png"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Design \"Dapur 3x3\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenDesigner}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"category_id\": 1,\r\n    \"title\": \"Dapur Njalok Revisi\",\r\n    \"description\": \"Deskripsi Revisi\",\r\n    \"area\": 20\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/designs/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Design \"Dapur 3x3\" Image",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenDesigner}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"contentType": "",
											"type": "file",
											"src": "/C:/Users/Ri_zki/Pictures/vlcsnap-2022-04-30-23h54m46s243.png"
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/designs/1/image",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs",
										"1",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Design \"Dapur 3x3\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenDesigner}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/designs/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Budget Plans",
					"item": [
						{
							"name": "Add Budget Plan For \"Dapur 3x3\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenDesigner}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"persiapan\": {\r\n        \"data\": [\r\n            {\r\n                \"uraian\": \"pembersihan lapangan\",\r\n                \"volume\": 124.2,\r\n                \"satuan\": \"M\",\r\n                \"harga\": 3871.88\r\n            },\r\n            {\r\n                \"uraian\": \"Pasangan Bouwplank / Pengukuran v2\",\r\n                \"volume\": 26.4,\r\n                \"satuan\": \"M\",\r\n                \"harga\": 19470.5\r\n            },\r\n            {\r\n                \"uraian\": \"Biaya Air Kerja\",\r\n                \"volume\": 1,\r\n                \"satuan\": \"M\",\r\n                \"harga\": 150000\r\n            }\r\n        ]\r\n    },\r\n    \"pondasi\": {\r\n        \"data\": [\r\n            {\r\n                \"uraian\": \"pembersihan lapangan\",\r\n                \"volume\": 124.2,\r\n                \"satuan\": \"M\",\r\n                \"harga\": 3871.88\r\n            },\r\n            {\r\n                \"uraian\": \"Pasangan Bouwplank / Pengukuran\",\r\n                \"volume\": 26.4,\r\n                \"satuan\": \"M\",\r\n                \"harga\": 19470.5\r\n            },\r\n            {\r\n                \"uraian\": \"Biaya Air Kerja\",\r\n                \"volume\": 1,\r\n                \"satuan\": \"M\",\r\n                \"harga\": 150000\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/designs/1/budget-plans",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs",
										"1",
										"budget-plans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Budget Plan For \"Dapur 3x3\" (JSON)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenDesigner}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/designs/1/budget-plans",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs",
										"1",
										"budget-plans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Budget Plan fo \"Dapur 3x3\" (PDF)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/uploads/budget-plans/2-budget-plan-1667195042214.pdf",
									"host": [
										"{{host}}"
									],
									"path": [
										"uploads",
										"budget-plans",
										"2-budget-plan-1667195042214.pdf"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Whole Budget Plan For \"Dapur 3x3\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenDesigner}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"persiapan\": {\r\n        \"data\": [\r\n            {\r\n                \"uraian\": \"pembersihan lapangan\",\r\n                \"volume\": 124.2,\r\n                \"satuan\": \"M\",\r\n                \"harga\": 3871.88\r\n            },\r\n            {\r\n                \"uraian\": \"Pasangan Bouwplank / Pengukuran v2\",\r\n                \"volume\": 26.4,\r\n                \"satuan\": \"M\",\r\n                \"harga\": 19470.5\r\n            },\r\n            {\r\n                \"uraian\": \"Biaya Air Kerja\",\r\n                \"volume\": 1,\r\n                \"satuan\": \"M\",\r\n                \"harga\": 150000\r\n            }\r\n        ]\r\n    },\r\n    \"pondasi\": {\r\n        \"data\": [\r\n            {\r\n                \"uraian\": \"pembersihan lapangan\",\r\n                \"volume\": 124.2,\r\n                \"satuan\": \"M\",\r\n                \"harga\": 3871.88\r\n            },\r\n            {\r\n                \"uraian\": \"Pasangan Bouwplank / Pengukuran\",\r\n                \"volume\": 26.4,\r\n                \"satuan\": \"M\",\r\n                \"harga\": 19470.5\r\n            },\r\n            {\r\n                \"uraian\": \"Biaya Air Kerja\",\r\n                \"volume\": 1,\r\n                \"satuan\": \"M\",\r\n                \"harga\": 150000\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/designs/1/budget-plans",
									"host": [
										"{{host}}"
									],
									"path": [
										"designs",
										"1",
										"budget-plans"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Chats",
			"item": [
				{
					"name": "(John) Send Chat to Designer Daniel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(201);\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.contents).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"receiverId\": 2,\r\n    \"contents\": \"Halo. Saya ingin konsultasi terkait Dapur 3x3.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/chats",
							"host": [
								"{{host}}"
							],
							"path": [
								"chats"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Get All Chats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(201);\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.contents).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"receiverId\": 2,\r\n    \"contents\": \"Halo. Saya ingin konsultasi terkait Dapur 3x3.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/chats",
							"host": [
								"{{host}}"
							],
							"path": [
								"chats"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Get All Chats with Designer Daniel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(201);\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.contents).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"receiverId\": 2,\r\n    \"contents\": \"Halo. Saya ingin konsultasi terkait Dapur 3x3.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/chats/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"chats",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Designer Jack) Get All Chats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(201);\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.contents).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenDesignerJack}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"receiverId\": 2,\r\n    \"contents\": \"Halo. Saya ingin konsultasi terkait Dapur 3x3.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/chats",
							"host": [
								"{{host}}"
							],
							"path": [
								"chats"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Designer Daniel) Get All Chats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(201);\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.contents).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenDesigner}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"receiverId\": 2,\r\n    \"contents\": \"Halo. Saya ingin konsultasi terkait Dapur 3x3.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/chats",
							"host": [
								"{{host}}"
							],
							"path": [
								"chats"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookmarks",
			"item": [
				{
					"name": "(John) Add bookmark to Design \"Dapur 3x3\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(201);\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"receiverId\": 2,\r\n    \"contents\": \"Halo. Saya ingin konsultasi terkait Dapur 3x3.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/designs/1/bookmarks",
							"host": [
								"{{host}}"
							],
							"path": [
								"designs",
								"1",
								"bookmarks"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Add bookmark to Design \"Ruang Tamu\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(201);\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"receiverId\": 2,\r\n    \"contents\": \"Halo. Saya ingin konsultasi terkait Dapur 3x3.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/designs/2/bookmarks",
							"host": [
								"{{host}}"
							],
							"path": [
								"designs",
								"2",
								"bookmarks"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Get All Bookmarks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(200);\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"    pm.expect(responseJson.data).to.length(2);\r",
									"    responseJson.data.forEach((bookmark) => {\r",
									"        pm.expect(bookmark.id).to.be.ok;\r",
									"        pm.expect(bookmark.design.title).to.be.ok;\r",
									"        pm.expect(bookmark.design.imageUrl).to.be.ok;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"receiverId\": 2,\r\n    \"contents\": \"Halo. Saya ingin konsultasi terkait Dapur 3x3.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/bookmarks",
							"host": [
								"{{host}}"
							],
							"path": [
								"bookmarks"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Delete bookmark to Design \"Dapur 3x3\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(200);\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"receiverId\": 2,\r\n    \"contents\": \"Halo. Saya ingin konsultasi terkait Dapur 3x3.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/designs/1/bookmarks",
							"host": [
								"{{host}}"
							],
							"path": [
								"designs",
								"1",
								"bookmarks"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Get All Bookmarks After Delete \"Dapur 3x3\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(200);\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"    pm.expect(responseJson.data).to.length(1);\r",
									"    responseJson.data.forEach((bookmark) => {\r",
									"        pm.expect(bookmark.id).to.be.ok;\r",
									"        pm.expect(bookmark.design.title).to.be.ok;\r",
									"        pm.expect(bookmark.design.imageUrl).to.be.ok;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"receiverId\": 2,\r\n    \"contents\": \"Halo. Saya ingin konsultasi terkait Dapur 3x3.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/bookmarks",
							"host": [
								"{{host}}"
							],
							"path": [
								"bookmarks"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order (Pesanan)",
			"item": [
				{
					"name": "(John) Order Design \"Dapur 3x3\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(201);\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"designId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/orders",
							"host": [
								"{{host}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Designer Daniel) Get All Managed Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(200);\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"    responseJson.data.forEach((order) => {\r",
									"        pm.expect(order.id).to.be.ok;\r",
									"        pm.expect(order.status).to.be.ok;\r",
									"        pm.expect(order.design.title).to.be.ok;\r",
									"        pm.expect(order.design.imageUrl).to.be.ok;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenDesigner}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"receiverId\": 2,\r\n    \"contents\": \"Halo. Saya ingin konsultasi terkait Dapur 3x3.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/orders/managed",
							"host": [
								"{{host}}"
							],
							"path": [
								"orders",
								"managed"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Get All Order History Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(200);\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"    pm.expect(responseJson.data).to.length(2);\r",
									"    responseJson.data.forEach((bookmark) => {\r",
									"        pm.expect(bookmark.id).to.be.ok;\r",
									"        pm.expect(bookmark.design.title).to.be.ok;\r",
									"        pm.expect(bookmark.design.image).to.be.ok;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"receiverId\": 2,\r\n    \"contents\": \"Halo. Saya ingin konsultasi terkait Dapur 3x3.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/orders",
							"host": [
								"{{host}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Designer Daniel)  Update Order for \"Dapur 3x3\" by John",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.code).to.equal(200);\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenDesigner}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"In Progress\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/orders/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"orders",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}